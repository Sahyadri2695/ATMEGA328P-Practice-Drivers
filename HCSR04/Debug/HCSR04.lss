
HCSR04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000508  0000059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000508  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800104  00800104  000005a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca8  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa9  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000430  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000021dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000520  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000219  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000029c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_1>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 e0       	ldi	r30, 0x08	; 8
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e0       	ldi	r26, 0x04	; 4
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	af 30       	cpi	r26, 0x0F	; 15
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  ea:	0c 94 82 02 	jmp	0x504	; 0x504 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <USART_init>:
volatile int distance;
char buffer [5];

void USART_init(void)
{	
	UBRR0H = (uint8_t)((BAUD_PRESCALLER)>> 8);     
  f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);          
  f6:	87 e6       	ldi	r24, 0x67	; 103
  f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);               
  fc:	88 e1       	ldi	r24, 0x18	; 24
  fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);             
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 108:	08 95       	ret

0000010a <USART_send>:
}

void USART_send(uint8_t data)
{
	while(!(UCSR0A & (1<<UDRE0)));                
 10a:	e0 ec       	ldi	r30, 0xC0	; 192
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 81       	ld	r25, Z
 110:	95 ff       	sbrs	r25, 5
 112:	fd cf       	rjmp	.-6      	; 0x10e <USART_send+0x4>
	UDR0 = data;                                  	
 114:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 118:	08 95       	ret

0000011a <printString>:
}

void printString(const char myString[]) 
{
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	fc 01       	movw	r30, r24
	uint8_t i = 0;
	while (myString[i]) 
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	59 f0       	breq	.+22     	; 0x13e <printString+0x24>
 128:	8f 01       	movw	r16, r30
 12a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		USART_send(myString[i]);
 12c:	0e 94 85 00 	call	0x10a	; 0x10a <USART_send>
		i++;
 130:	cf 5f       	subi	r28, 0xFF	; 255
}

void printString(const char myString[]) 
{
	uint8_t i = 0;
	while (myString[i]) 
 132:	f8 01       	movw	r30, r16
 134:	ec 0f       	add	r30, r28
 136:	f1 1d       	adc	r31, r1
 138:	80 81       	ld	r24, Z
 13a:	81 11       	cpse	r24, r1
 13c:	f7 cf       	rjmp	.-18     	; 0x12c <printString+0x12>
	{
		USART_send(myString[i]);
		i++;
	}
}
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	08 95       	ret

00000146 <initInterrupt0>:

void initInterrupt0(void) // Configure Interrupt
{
	EIMSK |= (1 << INT0); // enable INT0 
 146:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC11); // The falling edge on INT0 generates an interrupt request i.e., when the echo pin goes LOW, the counter has to stop counting and store the counted value.
 148:	e9 e6       	ldi	r30, 0x69	; 105
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 60       	ori	r24, 0x08	; 8
 150:	80 83       	st	Z, r24
	sei(); //set (global) interrupt enable bit 
 152:	78 94       	sei
 154:	08 95       	ret

00000156 <__vector_1>:
}

ISR(INT0_vect) // Interrupt Service Routine triggered on falling edge of Echo pin.
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	/* The echo pin goes high as soon as ultrasound wave is sent and it goes low only when it receives the reflected wave or when timed out. 
	The duration for which the echo pin stays high is directly proportional to the distance of the obstacle from sensor. */
	TCCR1B = 0; // Stop counter
 16c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	duration = TCNT1; // Store counter value (duration).
 170:	e4 e8       	ldi	r30, 0x84	; 132
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	91 81       	ldd	r25, Z+1	; 0x01
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <duration>
 180:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <duration+0x1>
 184:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <duration+0x2>
 188:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <duration+0x3>
	TCNT1 = 0; // Reset counter.
 18c:	11 82       	std	Z+1, r1	; 0x01
 18e:	10 82       	st	Z, r1
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <main>:

int main(void)
{
	DDRD |= (1 << 3); // PD3 Trigger pin (INT1).
 1a6:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~(1 << 2);// PD2 Echo pin (INT0).
 1a8:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << 2);// Enable pull up.
 1aa:	5a 9a       	sbi	0x0b, 2	; 11
	USART_init();
 1ac:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_init>
	initInterrupt0();
 1b0:	0e 94 a3 00 	call	0x146	; 0x146 <initInterrupt0>
    while (1) 
    {
		TCCR1B |= (1<<CS11)|(1<<CS10);/* Echo pin is assumed to go high as soon as the trigger pin goes high. So the counter is started by setting the Prescaler value, as soon
 1b4:	c1 e8       	ldi	r28, 0x81	; 129
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
 1b8:	88 81       	ld	r24, Y
 1ba:	83 60       	ori	r24, 0x03	; 3
 1bc:	88 83       	st	Y, r24
                                          as trigger pin goes high, so that it is able to determine the exact duration for which the echo pin stays high */
		PORTD &= ~(1 << 3);
 1be:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	85 e3       	ldi	r24, 0x35	; 53
 1c2:	8a 95       	dec	r24
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x1c>
 1c6:	00 00       	nop
		_delay_us(10); // In the loop first you have to make sure that the trigPin is clear so we have to set that pin on a LOW State for just 10 us. 
		PORTD |= (1 << 3);
 1c8:	5b 9a       	sbi	0x0b, 3	; 11
 1ca:	85 e3       	ldi	r24, 0x35	; 53
 1cc:	8a 95       	dec	r24
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x26>
 1d0:	00 00       	nop
		_delay_us(10); // Now for generating the ultrasound wave we have to set the trigPin on HIGH State for 10 us. 
		PORTD &= ~(1 << 3); 
 1d2:	5b 98       	cbi	0x0b, 3	; 11
 1d4:	85 e3       	ldi	r24, 0x35	; 53
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x30>
 1da:	00 00       	nop
		_delay_us(10);
		distance = duration*0.034/2; 
 1dc:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <duration>
 1e0:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <duration+0x1>
 1e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <duration+0x2>
 1e8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <duration+0x3>
 1ec:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__floatsisf>
 1f0:	26 e9       	ldi	r18, 0x96	; 150
 1f2:	33 e4       	ldi	r19, 0x43	; 67
 1f4:	4b e0       	ldi	r20, 0x0B	; 11
 1f6:	5d e3       	ldi	r21, 0x3D	; 61
 1f8:	0e 94 b8 01 	call	0x370	; 0x370 <__mulsf3>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	5f e3       	ldi	r21, 0x3F	; 63
 204:	0e 94 b8 01 	call	0x370	; 0x370 <__mulsf3>
 208:	0e 94 1c 01 	call	0x238	; 0x238 <__fixsfsi>
 20c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 210:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
		itoa(distance,buffer,10);
 214:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 218:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 21c:	4a e0       	ldi	r20, 0x0A	; 10
 21e:	6a e0       	ldi	r22, 0x0A	; 10
 220:	71 e0       	ldi	r23, 0x01	; 1
 222:	0e 94 4d 02 	call	0x49a	; 0x49a <__itoa_ncheck>
		printString(buffer);
 226:	8a e0       	ldi	r24, 0x0A	; 10
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 8d 00 	call	0x11a	; 0x11a <printString>
		printString("\r\n");
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 8d 00 	call	0x11a	; 0x11a <printString>
 236:	c0 cf       	rjmp	.-128    	; 0x1b8 <main+0x12>

00000238 <__fixsfsi>:
 238:	0e 94 23 01 	call	0x246	; 0x246 <__fixunssfsi>
 23c:	68 94       	set
 23e:	b1 11       	cpse	r27, r1
 240:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_szero>
 244:	08 95       	ret

00000246 <__fixunssfsi>:
 246:	0e 94 97 01 	call	0x32e	; 0x32e <__fp_splitA>
 24a:	88 f0       	brcs	.+34     	; 0x26e <__fixunssfsi+0x28>
 24c:	9f 57       	subi	r25, 0x7F	; 127
 24e:	98 f0       	brcs	.+38     	; 0x276 <__fixunssfsi+0x30>
 250:	b9 2f       	mov	r27, r25
 252:	99 27       	eor	r25, r25
 254:	b7 51       	subi	r27, 0x17	; 23
 256:	b0 f0       	brcs	.+44     	; 0x284 <__fixunssfsi+0x3e>
 258:	e1 f0       	breq	.+56     	; 0x292 <__fixunssfsi+0x4c>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	88 1f       	adc	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	1a f0       	brmi	.+6      	; 0x26a <__fixunssfsi+0x24>
 264:	ba 95       	dec	r27
 266:	c9 f7       	brne	.-14     	; 0x25a <__fixunssfsi+0x14>
 268:	14 c0       	rjmp	.+40     	; 0x292 <__fixunssfsi+0x4c>
 26a:	b1 30       	cpi	r27, 0x01	; 1
 26c:	91 f0       	breq	.+36     	; 0x292 <__fixunssfsi+0x4c>
 26e:	0e 94 b1 01 	call	0x362	; 0x362 <__fp_zero>
 272:	b1 e0       	ldi	r27, 0x01	; 1
 274:	08 95       	ret
 276:	0c 94 b1 01 	jmp	0x362	; 0x362 <__fp_zero>
 27a:	67 2f       	mov	r22, r23
 27c:	78 2f       	mov	r23, r24
 27e:	88 27       	eor	r24, r24
 280:	b8 5f       	subi	r27, 0xF8	; 248
 282:	39 f0       	breq	.+14     	; 0x292 <__fixunssfsi+0x4c>
 284:	b9 3f       	cpi	r27, 0xF9	; 249
 286:	cc f3       	brlt	.-14     	; 0x27a <__fixunssfsi+0x34>
 288:	86 95       	lsr	r24
 28a:	77 95       	ror	r23
 28c:	67 95       	ror	r22
 28e:	b3 95       	inc	r27
 290:	d9 f7       	brne	.-10     	; 0x288 <__fixunssfsi+0x42>
 292:	3e f4       	brtc	.+14     	; 0x2a2 <__fixunssfsi+0x5c>
 294:	90 95       	com	r25
 296:	80 95       	com	r24
 298:	70 95       	com	r23
 29a:	61 95       	neg	r22
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	8f 4f       	sbci	r24, 0xFF	; 255
 2a0:	9f 4f       	sbci	r25, 0xFF	; 255
 2a2:	08 95       	ret

000002a4 <__floatunsisf>:
 2a4:	e8 94       	clt
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <__floatsisf+0x12>

000002a8 <__floatsisf>:
 2a8:	97 fb       	bst	r25, 7
 2aa:	3e f4       	brtc	.+14     	; 0x2ba <__floatsisf+0x12>
 2ac:	90 95       	com	r25
 2ae:	80 95       	com	r24
 2b0:	70 95       	com	r23
 2b2:	61 95       	neg	r22
 2b4:	7f 4f       	sbci	r23, 0xFF	; 255
 2b6:	8f 4f       	sbci	r24, 0xFF	; 255
 2b8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ba:	99 23       	and	r25, r25
 2bc:	a9 f0       	breq	.+42     	; 0x2e8 <__floatsisf+0x40>
 2be:	f9 2f       	mov	r31, r25
 2c0:	96 e9       	ldi	r25, 0x96	; 150
 2c2:	bb 27       	eor	r27, r27
 2c4:	93 95       	inc	r25
 2c6:	f6 95       	lsr	r31
 2c8:	87 95       	ror	r24
 2ca:	77 95       	ror	r23
 2cc:	67 95       	ror	r22
 2ce:	b7 95       	ror	r27
 2d0:	f1 11       	cpse	r31, r1
 2d2:	f8 cf       	rjmp	.-16     	; 0x2c4 <__floatsisf+0x1c>
 2d4:	fa f4       	brpl	.+62     	; 0x314 <__floatsisf+0x6c>
 2d6:	bb 0f       	add	r27, r27
 2d8:	11 f4       	brne	.+4      	; 0x2de <__floatsisf+0x36>
 2da:	60 ff       	sbrs	r22, 0
 2dc:	1b c0       	rjmp	.+54     	; 0x314 <__floatsisf+0x6c>
 2de:	6f 5f       	subi	r22, 0xFF	; 255
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	8f 4f       	sbci	r24, 0xFF	; 255
 2e4:	9f 4f       	sbci	r25, 0xFF	; 255
 2e6:	16 c0       	rjmp	.+44     	; 0x314 <__floatsisf+0x6c>
 2e8:	88 23       	and	r24, r24
 2ea:	11 f0       	breq	.+4      	; 0x2f0 <__floatsisf+0x48>
 2ec:	96 e9       	ldi	r25, 0x96	; 150
 2ee:	11 c0       	rjmp	.+34     	; 0x312 <__floatsisf+0x6a>
 2f0:	77 23       	and	r23, r23
 2f2:	21 f0       	breq	.+8      	; 0x2fc <__floatsisf+0x54>
 2f4:	9e e8       	ldi	r25, 0x8E	; 142
 2f6:	87 2f       	mov	r24, r23
 2f8:	76 2f       	mov	r23, r22
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <__floatsisf+0x5e>
 2fc:	66 23       	and	r22, r22
 2fe:	71 f0       	breq	.+28     	; 0x31c <__floatsisf+0x74>
 300:	96 e8       	ldi	r25, 0x86	; 134
 302:	86 2f       	mov	r24, r22
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	2a f0       	brmi	.+10     	; 0x314 <__floatsisf+0x6c>
 30a:	9a 95       	dec	r25
 30c:	66 0f       	add	r22, r22
 30e:	77 1f       	adc	r23, r23
 310:	88 1f       	adc	r24, r24
 312:	da f7       	brpl	.-10     	; 0x30a <__floatsisf+0x62>
 314:	88 0f       	add	r24, r24
 316:	96 95       	lsr	r25
 318:	87 95       	ror	r24
 31a:	97 f9       	bld	r25, 7
 31c:	08 95       	ret

0000031e <__fp_split3>:
 31e:	57 fd       	sbrc	r21, 7
 320:	90 58       	subi	r25, 0x80	; 128
 322:	44 0f       	add	r20, r20
 324:	55 1f       	adc	r21, r21
 326:	59 f0       	breq	.+22     	; 0x33e <__fp_splitA+0x10>
 328:	5f 3f       	cpi	r21, 0xFF	; 255
 32a:	71 f0       	breq	.+28     	; 0x348 <__fp_splitA+0x1a>
 32c:	47 95       	ror	r20

0000032e <__fp_splitA>:
 32e:	88 0f       	add	r24, r24
 330:	97 fb       	bst	r25, 7
 332:	99 1f       	adc	r25, r25
 334:	61 f0       	breq	.+24     	; 0x34e <__fp_splitA+0x20>
 336:	9f 3f       	cpi	r25, 0xFF	; 255
 338:	79 f0       	breq	.+30     	; 0x358 <__fp_splitA+0x2a>
 33a:	87 95       	ror	r24
 33c:	08 95       	ret
 33e:	12 16       	cp	r1, r18
 340:	13 06       	cpc	r1, r19
 342:	14 06       	cpc	r1, r20
 344:	55 1f       	adc	r21, r21
 346:	f2 cf       	rjmp	.-28     	; 0x32c <__fp_split3+0xe>
 348:	46 95       	lsr	r20
 34a:	f1 df       	rcall	.-30     	; 0x32e <__fp_splitA>
 34c:	08 c0       	rjmp	.+16     	; 0x35e <__fp_splitA+0x30>
 34e:	16 16       	cp	r1, r22
 350:	17 06       	cpc	r1, r23
 352:	18 06       	cpc	r1, r24
 354:	99 1f       	adc	r25, r25
 356:	f1 cf       	rjmp	.-30     	; 0x33a <__fp_splitA+0xc>
 358:	86 95       	lsr	r24
 35a:	71 05       	cpc	r23, r1
 35c:	61 05       	cpc	r22, r1
 35e:	08 94       	sec
 360:	08 95       	ret

00000362 <__fp_zero>:
 362:	e8 94       	clt

00000364 <__fp_szero>:
 364:	bb 27       	eor	r27, r27
 366:	66 27       	eor	r22, r22
 368:	77 27       	eor	r23, r23
 36a:	cb 01       	movw	r24, r22
 36c:	97 f9       	bld	r25, 7
 36e:	08 95       	ret

00000370 <__mulsf3>:
 370:	0e 94 cb 01 	call	0x396	; 0x396 <__mulsf3x>
 374:	0c 94 3c 02 	jmp	0x478	; 0x478 <__fp_round>
 378:	0e 94 2e 02 	call	0x45c	; 0x45c <__fp_pscA>
 37c:	38 f0       	brcs	.+14     	; 0x38c <__mulsf3+0x1c>
 37e:	0e 94 35 02 	call	0x46a	; 0x46a <__fp_pscB>
 382:	20 f0       	brcs	.+8      	; 0x38c <__mulsf3+0x1c>
 384:	95 23       	and	r25, r21
 386:	11 f0       	breq	.+4      	; 0x38c <__mulsf3+0x1c>
 388:	0c 94 25 02 	jmp	0x44a	; 0x44a <__fp_inf>
 38c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_nan>
 390:	11 24       	eor	r1, r1
 392:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_szero>

00000396 <__mulsf3x>:
 396:	0e 94 8f 01 	call	0x31e	; 0x31e <__fp_split3>
 39a:	70 f3       	brcs	.-36     	; 0x378 <__mulsf3+0x8>

0000039c <__mulsf3_pse>:
 39c:	95 9f       	mul	r25, r21
 39e:	c1 f3       	breq	.-16     	; 0x390 <__mulsf3+0x20>
 3a0:	95 0f       	add	r25, r21
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	55 1f       	adc	r21, r21
 3a6:	62 9f       	mul	r22, r18
 3a8:	f0 01       	movw	r30, r0
 3aa:	72 9f       	mul	r23, r18
 3ac:	bb 27       	eor	r27, r27
 3ae:	f0 0d       	add	r31, r0
 3b0:	b1 1d       	adc	r27, r1
 3b2:	63 9f       	mul	r22, r19
 3b4:	aa 27       	eor	r26, r26
 3b6:	f0 0d       	add	r31, r0
 3b8:	b1 1d       	adc	r27, r1
 3ba:	aa 1f       	adc	r26, r26
 3bc:	64 9f       	mul	r22, r20
 3be:	66 27       	eor	r22, r22
 3c0:	b0 0d       	add	r27, r0
 3c2:	a1 1d       	adc	r26, r1
 3c4:	66 1f       	adc	r22, r22
 3c6:	82 9f       	mul	r24, r18
 3c8:	22 27       	eor	r18, r18
 3ca:	b0 0d       	add	r27, r0
 3cc:	a1 1d       	adc	r26, r1
 3ce:	62 1f       	adc	r22, r18
 3d0:	73 9f       	mul	r23, r19
 3d2:	b0 0d       	add	r27, r0
 3d4:	a1 1d       	adc	r26, r1
 3d6:	62 1f       	adc	r22, r18
 3d8:	83 9f       	mul	r24, r19
 3da:	a0 0d       	add	r26, r0
 3dc:	61 1d       	adc	r22, r1
 3de:	22 1f       	adc	r18, r18
 3e0:	74 9f       	mul	r23, r20
 3e2:	33 27       	eor	r19, r19
 3e4:	a0 0d       	add	r26, r0
 3e6:	61 1d       	adc	r22, r1
 3e8:	23 1f       	adc	r18, r19
 3ea:	84 9f       	mul	r24, r20
 3ec:	60 0d       	add	r22, r0
 3ee:	21 1d       	adc	r18, r1
 3f0:	82 2f       	mov	r24, r18
 3f2:	76 2f       	mov	r23, r22
 3f4:	6a 2f       	mov	r22, r26
 3f6:	11 24       	eor	r1, r1
 3f8:	9f 57       	subi	r25, 0x7F	; 127
 3fa:	50 40       	sbci	r21, 0x00	; 0
 3fc:	9a f0       	brmi	.+38     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3fe:	f1 f0       	breq	.+60     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 400:	88 23       	and	r24, r24
 402:	4a f0       	brmi	.+18     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	bb 1f       	adc	r27, r27
 40a:	66 1f       	adc	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	88 1f       	adc	r24, r24
 410:	91 50       	subi	r25, 0x01	; 1
 412:	50 40       	sbci	r21, 0x00	; 0
 414:	a9 f7       	brne	.-22     	; 0x400 <__LOCK_REGION_LENGTH__>
 416:	9e 3f       	cpi	r25, 0xFE	; 254
 418:	51 05       	cpc	r21, r1
 41a:	80 f0       	brcs	.+32     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 41c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__fp_inf>
 420:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_szero>
 424:	5f 3f       	cpi	r21, 0xFF	; 255
 426:	e4 f3       	brlt	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 428:	98 3e       	cpi	r25, 0xE8	; 232
 42a:	d4 f3       	brlt	.-12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 42c:	86 95       	lsr	r24
 42e:	77 95       	ror	r23
 430:	67 95       	ror	r22
 432:	b7 95       	ror	r27
 434:	f7 95       	ror	r31
 436:	e7 95       	ror	r30
 438:	9f 5f       	subi	r25, 0xFF	; 255
 43a:	c1 f7       	brne	.-16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 43c:	fe 2b       	or	r31, r30
 43e:	88 0f       	add	r24, r24
 440:	91 1d       	adc	r25, r1
 442:	96 95       	lsr	r25
 444:	87 95       	ror	r24
 446:	97 f9       	bld	r25, 7
 448:	08 95       	ret

0000044a <__fp_inf>:
 44a:	97 f9       	bld	r25, 7
 44c:	9f 67       	ori	r25, 0x7F	; 127
 44e:	80 e8       	ldi	r24, 0x80	; 128
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	08 95       	ret

00000456 <__fp_nan>:
 456:	9f ef       	ldi	r25, 0xFF	; 255
 458:	80 ec       	ldi	r24, 0xC0	; 192
 45a:	08 95       	ret

0000045c <__fp_pscA>:
 45c:	00 24       	eor	r0, r0
 45e:	0a 94       	dec	r0
 460:	16 16       	cp	r1, r22
 462:	17 06       	cpc	r1, r23
 464:	18 06       	cpc	r1, r24
 466:	09 06       	cpc	r0, r25
 468:	08 95       	ret

0000046a <__fp_pscB>:
 46a:	00 24       	eor	r0, r0
 46c:	0a 94       	dec	r0
 46e:	12 16       	cp	r1, r18
 470:	13 06       	cpc	r1, r19
 472:	14 06       	cpc	r1, r20
 474:	05 06       	cpc	r0, r21
 476:	08 95       	ret

00000478 <__fp_round>:
 478:	09 2e       	mov	r0, r25
 47a:	03 94       	inc	r0
 47c:	00 0c       	add	r0, r0
 47e:	11 f4       	brne	.+4      	; 0x484 <__fp_round+0xc>
 480:	88 23       	and	r24, r24
 482:	52 f0       	brmi	.+20     	; 0x498 <__fp_round+0x20>
 484:	bb 0f       	add	r27, r27
 486:	40 f4       	brcc	.+16     	; 0x498 <__fp_round+0x20>
 488:	bf 2b       	or	r27, r31
 48a:	11 f4       	brne	.+4      	; 0x490 <__fp_round+0x18>
 48c:	60 ff       	sbrs	r22, 0
 48e:	04 c0       	rjmp	.+8      	; 0x498 <__fp_round+0x20>
 490:	6f 5f       	subi	r22, 0xFF	; 255
 492:	7f 4f       	sbci	r23, 0xFF	; 255
 494:	8f 4f       	sbci	r24, 0xFF	; 255
 496:	9f 4f       	sbci	r25, 0xFF	; 255
 498:	08 95       	ret

0000049a <__itoa_ncheck>:
 49a:	bb 27       	eor	r27, r27
 49c:	4a 30       	cpi	r20, 0x0A	; 10
 49e:	31 f4       	brne	.+12     	; 0x4ac <__itoa_ncheck+0x12>
 4a0:	99 23       	and	r25, r25
 4a2:	22 f4       	brpl	.+8      	; 0x4ac <__itoa_ncheck+0x12>
 4a4:	bd e2       	ldi	r27, 0x2D	; 45
 4a6:	90 95       	com	r25
 4a8:	81 95       	neg	r24
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__utoa_common>

000004b0 <__utoa_ncheck>:
 4b0:	bb 27       	eor	r27, r27

000004b2 <__utoa_common>:
 4b2:	fb 01       	movw	r30, r22
 4b4:	55 27       	eor	r21, r21
 4b6:	aa 27       	eor	r26, r26
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	aa 1f       	adc	r26, r26
 4be:	a4 17       	cp	r26, r20
 4c0:	10 f0       	brcs	.+4      	; 0x4c6 <__utoa_common+0x14>
 4c2:	a4 1b       	sub	r26, r20
 4c4:	83 95       	inc	r24
 4c6:	50 51       	subi	r21, 0x10	; 16
 4c8:	b9 f7       	brne	.-18     	; 0x4b8 <__utoa_common+0x6>
 4ca:	a0 5d       	subi	r26, 0xD0	; 208
 4cc:	aa 33       	cpi	r26, 0x3A	; 58
 4ce:	08 f0       	brcs	.+2      	; 0x4d2 <__utoa_common+0x20>
 4d0:	a9 5d       	subi	r26, 0xD9	; 217
 4d2:	a1 93       	st	Z+, r26
 4d4:	00 97       	sbiw	r24, 0x00	; 0
 4d6:	79 f7       	brne	.-34     	; 0x4b6 <__utoa_common+0x4>
 4d8:	b1 11       	cpse	r27, r1
 4da:	b1 93       	st	Z+, r27
 4dc:	11 92       	st	Z+, r1
 4de:	cb 01       	movw	r24, r22
 4e0:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <strrev>

000004e4 <strrev>:
 4e4:	dc 01       	movw	r26, r24
 4e6:	fc 01       	movw	r30, r24
 4e8:	67 2f       	mov	r22, r23
 4ea:	71 91       	ld	r23, Z+
 4ec:	77 23       	and	r23, r23
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <strrev+0x4>
 4f0:	32 97       	sbiw	r30, 0x02	; 2
 4f2:	04 c0       	rjmp	.+8      	; 0x4fc <strrev+0x18>
 4f4:	7c 91       	ld	r23, X
 4f6:	6d 93       	st	X+, r22
 4f8:	70 83       	st	Z, r23
 4fa:	62 91       	ld	r22, -Z
 4fc:	ae 17       	cp	r26, r30
 4fe:	bf 07       	cpc	r27, r31
 500:	c8 f3       	brcs	.-14     	; 0x4f4 <strrev+0x10>
 502:	08 95       	ret

00000504 <_exit>:
 504:	f8 94       	cli

00000506 <__stop_program>:
 506:	ff cf       	rjmp	.-2      	; 0x506 <__stop_program>
